library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(disp,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,shape=factor(year))
head(mpg)
table(mpg$displ)
unique(mpg$displ)
table(mpg$year)
p<-ggplot()
p<-p+layer(geom='point')
p<-p+geom_point()
p<-ggplot(movies)
p+stat_bin(aes(year,..count..))
head(movies)
p+geom_histogram(aes(year))
head(mpg)
p<-ggplot(mpg)
p+geom_point(aes(city,hwy))
p+geom_point(aes(cty,hwy))
p+geom_point(aes(cty,hwy),position='jitter')
sd(c(1,2,3,4,5,6,7))
x<-c(1,2,3,4,5,6,7)
y<-c(1,2,3,4,5,6)
mean(x)
mean(y)
sd(x)
sd(y)
?sd
var(x)
var(y)
x
IQR(x)
range(x)
?IQR
tail(x,-1)
head(x,2)
IQR(x,type=7)
scale(x)
x-mean(x)/sd(x)
(x-mean(x))/sd(x)
?scale
?rnorm
y<-rnorm(7,50,10)
y
scale(y)
y<-rnorm(7,50,10)
y
scale(y)
x<-c(3:6)
y<-c(40,50,60,70)
cor(x,y)
cor(y,x)
z<-c(70,50,30,10)
cor(x,z)
fix(x)
dbinom(0,size=3,prob=1/2)
x=seq(0,3,by=1)
x
prob_x<-dbinom(x,size=3,prob=1/2)
cbind(x,prob_x)
plot(x,prob_x,type=h,col="red",main="Binomial(3,1/2)")
plot(x,prob_x,type="h",col="red",main="Binomial(3,1/2)")
sum(x*prob_x)
install.packages(c("slidify","ggplot2","devtools"))
library("ggplot2")
library(ggplot2)
exit
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-X:size)
select(cran,-(X:size)
)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package==swirl)
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version>="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux=gnu")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(ip_id,package,size)
cran3<-select(cran2,ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size_mb-1000)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package,add=FALSE)
by_package
summarize(by_package,mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(packsum$count,probs=0.99)
quantile(pack_sum$count,probs=0.99)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count()))
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_su$unique,probs=0.99)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit
submit()
View(result3)
submit()
submit
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
?gather
students2
submit()
?spread
students3
submit()
submit()
submit()
student2
students3
submit()
gather(students3,class, grade, class1:class5, na.rm = TRUE)
submit
submit()
extract_numeric("class5")
submit()
students4
?select
students4
submit()
submit
submit()
submit()
submit()
passed
failed
submit()
submit()
submit()
reset()
reset()
submit()
reset()
submit()
info()
skip()
submit()
submt()
submit()
skip()
bind_rows(passed,failed)
sat
skip()
skip()
setwd("~/Documents/Coursera")
source('~/Documents/Coursera/ExData_Plotting1/plot1.R')
source('~/Documents/Coursera/ExData_Plotting1/plot1.R')
df$Time <- paste(df$Date, df$Time, sep=" ")
setwd("~/Documents/Coursera/ExData_Plotting1")
df$Time <- strptime(df$Time, "%Y-%m-%d %H:%M:%S")
source('~/Documents/Coursera/ExData_Plotting1/plot1.R')
png("plot1.png", width = 480, height = 480)
hist(df$Global_active_power, main = "Global Active power", col = "red", xlab = "Global Active Power (kilowatts)", )
dev.off
f <- "household_power_consumption.txt"
greped<-c()
repeat {
lines=readLines(f,n=nolines)      #read lines
idx <- grep("^[12]/2/2007", lines)  #find those that match
greped<-c(greped, lines[idx])       #add the found lines
if(nolines!=length(lines)) {
break #are we at the end of the file?
}
}
source('~/Documents/Coursera/ExData_Plotting1/plot1.R')
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
source('~/Documents/Coursera/ExData_Plotting1/plot1.R')
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
